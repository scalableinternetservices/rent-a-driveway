{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Mappings": {
        "Teams": {
            "403-Studio": {
                "sg": "sg-88a6cbec"
            },
            "ABCs": {
                "sg": "sg-e9a6cb8d"
            },
            "BiteMi": {
                "sg": "sg-0f67206b"
            },
            "EEGO": {
                "sg": "sg-86a6cbe2"
            },
            "Filmo": {
                "sg": "sg-93a6cbf7"
            },
            "Foodies": {
                "sg": "sg-fa06699e"
            },
            "GreatReads": {
                "sg": "sg-d2a7cab6"
            },
            "Happening": {
                "sg": "sg-7da1cc19"
            },
            "J10": {
                "sg": "sg-aaa6cbce"
            },
            "MINT": {
                "sg": "sg-32a6cb56"
            },
            "PASSion": {
                "sg": "sg-91a7caf5"
            },
            "Pickachu": {
                "sg": "sg-1ea6cb7a"
            },
            "ScaleTheTAB": {
                "sg": "sg-b0a6cbd4"
            },
            "Scrailibility": {
                "sg": "sg-50157a34"
            },
            "TeamUp": {
                "sg": "sg-4ea6cb2a"
            },
            "boiling-crab": {
                "sg": "sg-2ea6cb4a"
            },
            "demo": {
                "sg": "sg-a40665c0"
            },
            "hitchhike": {
                "sg": "sg-06a6cb62"
            },
            "infinity-1": {
                "sg": "sg-99a6cbfd"
            },
            "lolcounter": {
                "sg": "sg-cda7caa9"
            },
            "nil": {
                "sg": "sg-70a1cc14"
            },
            "poll": {
                "sg": "sg-f8fb979c"
            },
            "rent-a-driveway": {
                "sg": "sg-0fa6cb6b"
            },
            "segmentation-fault": {
                "sg": "sg-6fa1cc0b"
            },
            "sis-admin-InstanceSecurityGroup-PR56J7YARYKB": {
                "sg": "sg-fc395a98"
            },
            "smile-inc": {
                "sg": "sg-e7a7ca83"
            },
            "team-up": {
                "sg": "sg-ce0e61aa"
            }
        }
    },
    "Outputs": {
        "URL": {
            "Description": "The URL to the rails application.",
            "Value": {
                "Fn::Join": [
                    "",
                    [
                        "http://",
                        {
                            "Fn::GetAtt": [
                                "LoadBalancer",
                                "DNSName"
                            ]
                        }
                    ]
                ]
            }
        }
    },
    "Parameters": {
        "AppInstanceType": {
            "AllowedValues": [
                "t1.micro",
                "m1.small",
                "m1.medium",
                "m1.large",
                "m1.xlarge",
                "m2.xlarge",
                "m2.2xlarge",
                "m2.4xlarge",
                "m3.medium",
                "m3.large",
                "m3.xlarge",
                "m3.2xlarge",
                "c1.medium",
                "c1.xlarge",
                "c3.large",
                "c3.xlarge",
                "c3.2xlarge",
                "c3.4xlarge"
            ],
            "Default": "t1.micro",
            "Description": "The AppServer instance type.",
            "Type": "String"
        },
        "AppInstances": {
            "Default": 2,
            "Description": "The number of AppServer instances to launch.",
            "MaxValue": 8,
            "MinValue": 1,
            "Type": "Number"
        },
        "Branch": {
            "Default": "master",
            "Description": "The git branch to deploy.",
            "Type": "String"
        },
        "DBInstanceType": {
            "AllowedValues": [
                "db.t1.micro",
                "db.m1.small",
                "db.m1.medium",
                "db.m1.large",
                "db.m1.xlarge",
                "db.m2.xlarge",
                "db.m2.2xlarge",
                "db.m2.4xlarge",
                "db.m3.medium",
                "db.m3.large",
                "db.m3.xlarge",
                "db.m3.2xlarge",
                "db.c1.medium",
                "db.c1.xlarge",
                "db.c3.large",
                "db.c3.xlarge",
                "db.c3.2xlarge",
                "db.c3.4xlarge"
            ],
            "Default": "db.t1.micro",
            "Description": "The Database instance type.",
            "Type": "String"
        },
        "ProcessParallelism": {
            "Default": "1",
            "Description": "The number of worker processes.",
            "Type": "String"
        },
        "RubyVM": {
            "AllowedValues": [
                "MRI",
                "JRuby"
            ],
            "Default": "MRI",
            "Description": "The number of threads within each worker processes.",
            "Type": "String"
        },
        "TeamName": {
            "AllowedValues": [
                "Filmo",
                "Pickachu",
                "demo",
                "sis-admin-InstanceSecurityGroup-PR56J7YARYKB",
                "team-up",
                "lolcounter",
                "BiteMi",
                "poll",
                "GreatReads",
                "infinity-1",
                "TeamUp",
                "403-Studio",
                "smile-inc",
                "boiling-crab",
                "ABCs",
                "J10",
                "Scrailibility",
                "EEGO",
                "Happening",
                "nil",
                "Foodies",
                "ScaleTheTAB",
                "rent-a-driveway",
                "segmentation-fault",
                "MINT",
                "hitchhike",
                "PASSion"
            ],
            "ConstraintDescription": "Must exactly match your team name as shown in your Github URL.",
            "Description": "Your team name.",
            "Type": "String"
        },
        "ThreadParallelism": {
            "Default": "1",
            "Description": "The number of threads within each worker processes.",
            "Type": "String"
        }
    },
    "Resources": {
        "AppGroup": {
            "CreationPolicy": {
                "ResourceSignal": {
                    "Count": {
                        "Ref": "AppInstances"
                    },
                    "Timeout": "PT20M"
                }
            },
            "Properties": {
                "AvailabilityZones": {
                    "Fn::GetAZs": ""
                },
                "LaunchConfigurationName": {
                    "Ref": "AppServer"
                },
                "LoadBalancerNames": [
                    {
                        "Ref": "LoadBalancer"
                    }
                ],
                "MaxSize": {
                    "Ref": "AppInstances"
                },
                "MinSize": {
                    "Ref": "AppInstances"
                }
            },
            "Type": "AWS::AutoScaling::AutoScalingGroup"
        },
        "AppServer": {
            "Metadata": {
                "AWS::CloudFormation::Init": {
                    "app": {
                        "sources": {
                            "/home/ec2-user/app": {
                                "Fn::Join": [
                                    "",
                                    [
                                        "https://github.com/scalableinternetservices/",
                                        {
                                            "Ref": "TeamName"
                                        },
                                        "/tarball/",
                                        {
                                            "Ref": "Branch"
                                        }
                                    ]
                                ]
                            }
                        }
                    },
                    "configSets": {
                        "default": [
                            "packages",
                            "app",
                            "perms",
                            "user"
                        ]
                    },
                    "packages": {
                        "packages": {
                            "yum": {
                                "gcc-c++": [],
                                "git": [],
                                "libcurl-devel": [],
                                "make": [],
                                "memcached": [],
                                "mysql-devel": [],
                                "mysql-server": [],
                                "openssl-devel": [],
                                "pcre-devel": [],
                                "ruby22-devel": []
                            }
                        }
                    },
                    "perms": {
                        "commands": {
                            "update_permissions": {
                                "command": "chown -R ec2-user:ec2-user .",
                                "cwd": "/home/ec2-user/"
                            }
                        }
                    },
                    "user": {
                        "files": {
                            "/home/ec2-user/app/config/database.yml": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "production:\n  adapter: mysql2\n  database: rails_app\n",
                                            "  host: ",
                                            {
                                                "Fn::GetAtt": [
                                                    "Database",
                                                    "Endpoint.Address"
                                                ]
                                            },
                                            "\n  password: password\n"
                                        ]
                                    ]
                                },
                                "group": "ec2-user",
                                "owner": "ec2-user"
                            }
                        }
                    }
                }
            },
            "Properties": {
                "IamInstanceProfile": {
                    "Ref": "TeamName"
                },
                "ImageId": "ami-55a7ea65",
                "InstanceType": {
                    "Ref": "AppInstanceType"
                },
                "KeyName": {
                    "Ref": "TeamName"
                },
                "SecurityGroups": [
                    {
                        "Ref": "TeamName"
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash -v\nyum update -y aws-cfn-bootstrap\nyum update\n# Helper function\nfunction error_exit {",
                                "\n    /opt/aws/bin/cfn-signal -e 1 -r \"$1\" --stack ",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                "       --resource AppGroup --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\n    exit 1\n}",
                                "\n# Run cfn-init (see AWS::CloudFormation::Init)\n/opt/aws/bin/cfn-init -s ",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                " -r AppServer   --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                " || error_exit 'Failed to run cfn-init'\n# Don't require tty to run sudo\nsed -i 's/ requiretty/ !requiretty/' /etc/sudoers\nfunction user_sudo {",
                                "\n    sudo -u ec2-user bash -lc \"$*\"\n}",
                                "\n",
                                "# Update alternatives\nalternatives --set ruby /usr/bin/ruby2.2 || error_exit 'Failed ruby2.2 default'\n# Install bundler only after the alternatives have been set.\ngem install bundle || error_exit 'Failed to install bundle'\n# Update user's path if it hasn't been set already\necho \"export PATH=/usr/local/bin:\\$PATH\" >> /home/ec2-user/.bashrc\n",
                                "# Change to the app directory\ncd /home/ec2-user/app\n# Add environment variables to ec2-user's .bashrc\nexport RAILS_ENV=production\necho \"export RAILS_ENV=production\" >> ../.bashrc\necho \"export SECRET_KEY_BASE=b801783afb83bb8e614b32ccf6c05c855a927116d92062a75c6ffa61d58c58e62f13eb60cf1a31922c44b7e6a3e8f1809934a93llask938bl\" >> ../.bashrc\n\n# Redirect port 80 to port 3000 (ec2-user cannot bind port 80)\niptables -t nat -A PREROUTING -p tcp --dport 80 -j REDIRECT --to-port 3000\n\n# Run the app specific ec2 initialization\nif [ -f .ec2_initialize ]; then\n    sudo -u ec2-user bash -l .ec2_initialize     || error_exit 'Failed to run .ec2_initialize'\nfi\n\n# Add gems needed on production\necho -e \"\ngem 'therubyracer', platforms: :ruby \" >> Gemfile\necho -e \"\ngem 'mysql2', '~> 0.3.13', platforms: :ruby \" >> Gemfile\necho -e \"\ngem 'therubyrhino', platforms: :jruby \" >> Gemfile\necho -e \"\ngem 'activerecord-jdbc-adapter', platforms: :jruby \" >> Gemfile\necho -e \"\ngem 'multi_json'\" >> Gemfile\n\n# Run the remaining commands as the ec2-user in the app directory\nuser_sudo bundle install --without test development || error_exit 'Failed to install bundle'\n# Create the database and run the migrations (try up to 10x)\nloop=10\nwhile [ $loop -gt 0 ]; do\n  user_sudo rake db:create db:migrate\n  if [ $? -eq 0 ]; then\n    loop=-1\n  else\n    sleep 6\n    loop=$(expr $loop - 1)\n  fi\ndone\nif [ $loop -eq 0 ]; then\n  error_exit 'Failed to execute database migration'\nfi\n# Run the app specific ec2 initialization\nif [ -f .rails_initialize ]; then\n    sudo -u ec2-user bash -l .rails_initialize     || error_exit 'Failed to run .rails_initialize'\nfi\n# Generate static assets\nuser_sudo rake assets:precompile || error_exit 'Failed to precompile static assets'\n",
                                "# Configure the app to serve static assets\necho -e \"\ngem 'puma' \" >> /home/ec2-user/app/Gemfile\ncd /home/ec2-user/app\nif [ '",
                                {
                                    "Ref": "RubyVM"
                                },
                                "' == 'JRuby' ]; then\n  gpg --keyserver hkp://keys.gnupg.net   --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3\n  curl -sSL https://get.rvm.io | bash -s stable\n  echo \"source /home/ec2-user/.profile\" >> /home/ec2-user/.bash_profile\n  source /home/ec2-user/.profile\n  rvm install jruby-1.7.19\n  rvm --default use jruby-1.7.19\n  sudo yum install mysql-connector-java\n  echo \"\\$CLASSPATH ||= [] \" >> config/application.rb;\n  echo \"\\$CLASSPATH << '/usr/share/java/mysql-connector-java.jar'\"    >> config/application.rb;\nfi\nuser_sudo \"bundle install\"\nuser_sudo RAILS_SERVE_STATIC_FILES=true bundle exec puma -t ",
                                {
                                    "Ref": "ThreadParallelism"
                                },
                                " -w ",
                                {
                                    "Ref": "ProcessParallelism"
                                },
                                " -p 3000 -d || error_exit 'Failed to start rails server'\n",
                                "# All is well so signal success\n/opt/aws/bin/cfn-signal -e 0 --stack ",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                " --resource AppGroup   --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\n"
                            ]
                        ]
                    }
                }
            },
            "Type": "AWS::AutoScaling::LaunchConfiguration"
        },
        "Database": {
            "Properties": {
                "AllocatedStorage": 5,
                "BackupRetentionPeriod": 0,
                "DBInstanceClass": {
                    "Ref": "DBInstanceType"
                },
                "DBInstanceIdentifier": {
                    "Ref": "AWS::StackName"
                },
                "DBName": "rails_app",
                "Engine": "mysql",
                "MasterUserPassword": "password",
                "MasterUsername": "root",
                "VPCSecurityGroups": [
                    {
                        "Fn::FindInMap": [
                            "Teams",
                            {
                                "Ref": "TeamName"
                            },
                            "sg"
                        ]
                    }
                ]
            },
            "Type": "AWS::RDS::DBInstance"
        },
        "LoadBalancer": {
            "Properties": {
                "AvailabilityZones": {
                    "Fn::GetAZs": ""
                },
                "LBCookieStickinessPolicy": [
                    {
                        "CookieExpirationPeriod": 30,
                        "PolicyName": "CookiePolicy"
                    }
                ],
                "Listeners": [
                    {
                        "InstancePort": 3000,
                        "LoadBalancerPort": 80,
                        "PolicyNames": [
                            "CookiePolicy"
                        ],
                        "Protocol": "http"
                    }
                ],
                "LoadBalancerName": {
                    "Ref": "AWS::StackName"
                },
                "SecurityGroups": [
                    {
                        "Fn::FindInMap": [
                            "Teams",
                            {
                                "Ref": "TeamName"
                            },
                            "sg"
                        ]
                    }
                ]
            },
            "Type": "AWS::ElasticLoadBalancing::LoadBalancer"
        }
    }
}
